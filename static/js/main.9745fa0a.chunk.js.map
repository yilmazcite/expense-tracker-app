{"version":3,"sources":["components/ExpensesFilter.js","components/ExpenseDate.js","components/ExpenseItem.js","components/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/ExpensesChart.js","components/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpensesFilter","props","react_default","a","createElement","className","value","selected","onChange","event","onChangeFilter","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","components_ExpenseDate","title","amount","ExpensesList","items","length","filter","expense","id","components_ExpenseItem","key","map","ChartBar","barFillHeight","maxVal","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMax","max","apply","Object","toConsumableArray","components_Chart_ChartBar","ExpensesChart","_step","chartDataPoints","_iterator","_createForOfIteratorHelper","expenses","s","n","done","getMonth","err","e","f","components_Chart_Chart","Expenses","_useState","useState","_useState2","slicedToArray","filteredYear","setFilteredYear","filteredExpenses","toString","src_components_ExpensesFilter","selectedYear","components_ExpensesChart","src_components_ExpensesList","ExpenseForm","enteredTitle","setTitle","_useState3","_useState4","enteredAmount","setEnteredAmount","_useState5","_useState6","enteredDate","setDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpense","isEditing","setIsEditing","components_NewExpense_ExpenseForm","enteredExpenseData","objectSpread","floor","random","console","log","onAddExpense","App","setExpenses","components_NewExpense_NewExpense","prevExpenses","concat","components_Expenses","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.9745fa0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ExpensesFilter.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n  const yearChangeHandler = (event) => {\r\n    //console.log(event.target.value);\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter-control\">\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={yearChangeHandler}>\r\n          <option value=\"Select a year\">Year</option>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import React from \"react\";\r\nimport \"./ExpenseDate.css\";\r\n\r\nfunction ExpenseDate(props) {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"short\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-item-date\">\r\n      <div className=\"exp-item-month\">{month}</div>\r\n      <div className=\"exp-item-year\">{year}</div>\r\n      <div className=\"exp-item-day\">{day}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseDate;\r\n","import React from \"react\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport \"./ExpenseItem.css\";\r\n\r\nfunction ExpenseItem(props) {\r\n  return (\r\n    <li>\r\n      <div className=\"expense-item\">\r\n        <ExpenseDate date={props.date} />\r\n        <div className=\"expense-item-description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item-price\">${props.amount}</div>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\nimport \"./ExpensesList.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\nconst ExpensesList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return <h2 className=\"expenses-list-fallback\">Found no expenses.</h2>;\r\n  }\r\n  //The list is rendered and the actual date is retrieved and displayed as the first item of the list.\r\n  //It's because the local date is retrieved when the component is rendered for the very first time.\r\n  //Since the 'id' is empty during the first render, the items object is filtered below.\r\n  //So that the first render with the empty list will not be displayed:\r\n  return (\r\n    <ul className=\"expenses-list\">\r\n      {props.items\r\n        .filter((expense) => {\r\n          return expense.id !== \"\" ? (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          );\r\n        })\r\n        .map((expense) => {\r\n          return (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\nimport \"./ChartBar.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n\r\n  if (props.maxVal > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxVal) * 100) + \"%\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar-inner\">\r\n        <div className=\"chart-bar-fill\" style={{ height: barFillHeight }}></div>\r\n      </div>\r\n      <div className=\"chart-bar-label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import React from \"react\";\r\nimport \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\n\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value); //Get the value of each dataPoint and return a new array and store it inside 'dataPointValues'.\r\n  const totalMax = Math.max(...dataPointValues); //Then find the max value within the newly created array.\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <div className=\"chart\">\r\n        {props.dataPoints.map((dataPoint) => (\r\n          <ChartBar\r\n            key={dataPoint.label}\r\n            value={dataPoint.value}\r\n            maxVal={totalMax}\r\n            label={dataPoint.label}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"./Chart/Chart\";\r\n\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    {\r\n      label: \"Jan\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Feb\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Mar\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Apr\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"May\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Jun\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Jul\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Aug\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Sep\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Oct\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Nov\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Dec\",\r\n      value: 0,\r\n    },\r\n  ];\r\n\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth(); //starting at 0. So Jan is 0.\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import React, { useState } from \"react\";\r\nimport \"./Expenses.css\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\n\r\nfunction Expenses(props) {\r\n  const [filteredYear, setFilteredYear] = useState(\"\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n  return (\r\n    <div className=\"expenses\">\r\n      <ExpensesFilter\r\n        selected={filteredYear}\r\n        onChangeFilter={filterChangeHandler}\r\n      />\r\n      <ExpensesChart expenses={filteredExpenses} />\r\n      <ExpensesList items={filteredExpenses} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setDate] = useState(\"\");\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setDate(event.target.value);\r\n  };\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault(); //Prevents the page from refreshing when the submit button is clicked.\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData);\r\n\r\n    //Clear the input fields when the submit button is clicked:\r\n    setTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formSubmitHandler}>\r\n      <div className=\"new-expense-input-container\">\r\n        <div className=\"new-expense-input-info\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense-input-info\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense-input-info\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense-button\">\r\n        <button type=\"button\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.floor(Math.random() * 99),\r\n    };\r\n    console.log(expenseData);\r\n    props.onAddExpense(expenseData);\r\n    setIsEditing(false); //Close the form once it is submitted.\r\n  };\r\n\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add New Expense</button>\r\n      )}\r\n      {isEditing && (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          onCancel={stopEditingHandler}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Expenses from \"./components/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\nfunction App(props) {\n  const [expenses, setExpenses] = useState([\n    {\n      id: \"\",\n      title: \"\",\n      amount: \"\",\n      date: new Date(),\n    },\n  ]);\n\n  const addExpenseHandler = (expense) => {\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses items={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}